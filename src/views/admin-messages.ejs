<%- include('partials/header') %>

<div class="container mt-6 has-navbar-fixed-top " style="margin-left: 250px !important;">
  <div class="columns">
    <div class="column is-full">
      <div class="panel">
        <p class="panel-heading has-background-danger-45 has-text-white">
          Gestion des membres et Messagerie
        </p>
        <div class="columns">
          <!-- Colonne pour la liste des membres -->
          <div class="column is-one-third">
            <div class="panel-block">
              <div class="field">
                <input class="input" type="text" id="search" placeholder="Rechercher un membre...">
              </div>
            </div>
            <div class="panel-block" style="max-height: 400px; overflow-y: auto;">
              <div class="control">
                <ul id="memberList" class="menu-list">
                  <% members.forEach(member => { %>
                    <li class="box p-2 mb-3 has-background-light has-text-black">
                      <div class="is-flex is-justify-content-space-between is-align-items-center">
                        <span>#<%= member.user_id %> - <%= member.first_name %> <%= member.last_name %> (<%= member.email %>)</span>
                        <button class="button is-small has-background-danger-45 has-text-white" onclick="selectUser('<%= member.user_id %>', '<%= member.first_name %>')">Sélectionner</button>
                      </div>
                    </li>
                  <% }) %>
                </ul>
              </div>
            </div>
          </div>

          <!-- Colonne pour la messagerie -->
          <div class="column is-two-thirds">
            <div class="panel-block">
              <div id="chatBox" style="height: 400px; overflow-y: auto; border: 1px solid #dbdbdb; padding: 1em; background-color: white;">
                <p class="has-text-black">Sélectionnez un membre pour commencer à discuter.</p>
              </div>
            </div>
            <div class="panel-block">
              <div class="field has-addons">
                <div class="control is-expanded">
                  <input id="messageInput" class="input" placeholder="Tapez votre message...">
                </div>
                <div class="control">
                  <button class="button has-background-danger-45 has-text-white" onclick="sendMessage()">Envoyer</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div> 
    </div>
  </div>
</div>
<script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
<script>
  let selectedUserId = null;  // ID de l'utilisateur sélectionné
let selectedUserName = '';
const adminId = '<%= adminId %>';  // Récupère l'ID de l'admin depuis la session

// Sélectionner un utilisateur et afficher ses messages via Fetch
function selectUser(userId, userName) {
  selectedUserId = userId;
  selectedUserName = userName;
  const chatBox = document.getElementById('chatBox');
  chatBox.innerHTML = '';  // Vider la fenêtre de chat avant d'afficher les messages

  const header = document.createElement('p');
  header.className = 'has-text-black';
  header.textContent = `Chat avec l'utilisateur : ${userName} (#${userId})`;
  chatBox.appendChild(header);

  // Récupérer les messages pour l'utilisateur sélectionné
  fetchMessagesForUser(userId);

  // Lancer un polling pour mettre à jour les messages toutes les 5 secondes
  if (window.messagePollingInterval) {
    clearInterval(window.messagePollingInterval);
  }
  window.messagePollingInterval = setInterval(() => fetchMessagesForUser(userId), 2000);
}

// Fonction pour récupérer et afficher les messages d'un utilisateur
function fetchMessagesForUser(userId) {
  const chatBox = document.getElementById('chatBox');

  fetch(`/admin/messages/${userId}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    }
  })
  .then(response => response.json())
  .then(data => {
    const messages = data.messages;
    chatBox.innerHTML = '';  // Vider la fenêtre de chat avant d'afficher les messages

    if (messages.length > 0) {
      messages.forEach(message => {
        appendMessageToChatBox(message, message.sender_id === Number(adminId) ? 'Admin' : selectedUserName);
      });
      chatBox.scrollTop = chatBox.scrollHeight;  // Scroll automatique vers le bas
    } else {
      const noMessageElement = document.createElement('p');
      noMessageElement.className = 'has-text-black';
      noMessageElement.textContent = 'Aucun message trouvé.';
      chatBox.appendChild(noMessageElement);
    }
  })
  .catch(error => {
    console.error('Erreur lors de la récupération des messages:', error);
    const errorMessageElement = document.createElement('p');
    errorMessageElement.className = 'has-text-danger';
    errorMessageElement.textContent = 'Erreur lors de la récupération des messages.';
    chatBox.appendChild(errorMessageElement);
  });
}

// Fonction pour ajouter un message au chatBox
function appendMessageToChatBox(message, senderName) {
  const chatBox = document.getElementById('chatBox');
  const messageElement = document.createElement('p');
  messageElement.className = 'has-text-black';
  messageElement.innerHTML = `<strong>${senderName}</strong>: ${message.message}`;
  chatBox.appendChild(messageElement);
}

// Envoyer un message
function sendMessage() {
  const messageInput = document.getElementById('messageInput');
  const message = messageInput.value;
  if (selectedUserId && message.trim()) {
    // Sauvegarder le message via fetch
    fetch(`/admin/messages`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ sender_id: Number(adminId), receiver_id: selectedUserId, message: message })
    })
    .then(response => response.json())
    .then(data => {
      // Ajouter le message envoyé dans la fenêtre de chat
      appendMessageToChatBox({ message: message }, 'Admin');
      document.getElementById('chatBox').scrollTop = document.getElementById('chatBox').scrollHeight;

      // Vider le champ de saisie
      messageInput.value = '';
    })
    .catch(error => {
      console.error('Erreur lors de l\'envoi du message:', error);
    });
  }
}

// Lorsque la page est quittée ou rechargée, arrêter le polling
window.addEventListener('beforeunload', () => {
  if (window.messagePollingInterval) {
    clearInterval(window.messagePollingInterval);
  }
});

</script>

<%- include('partials/side-menu') %>
<%- include('partials/footer') %>
