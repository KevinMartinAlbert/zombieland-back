<%- include('partials/header') %>

<div class="container mt-6">
  <div class="columns">
    <div class="column is-full">
      <div class="panel">
        <p class="panel-heading has-background-danger-45 has-text-white">
          Gestion des membres et Messagerie
        </p>
        <div class="columns">
          <!-- Colonne pour la liste des membres -->
          <div class="column is-one-third">
            <div class="panel-block">
              <div class="field">
                <input class="input" type="text" id="search" placeholder="Rechercher un membre...">
              </div>
            </div>
            <div class="panel-block" style="max-height: 400px; overflow-y: auto;">
              <div class="control">
                <ul id="memberList" class="menu-list">
                  <% members.forEach(member => { %>
                    <li class="box p-2 mb-3 has-background-light has-text-black">
                      <div class="is-flex is-justify-content-space-between is-align-items-center">
                        <span>#<%= member.user_id %> - <%= member.first_name %> <%= member.last_name %> (<%= member.email %>)</span>
                        <button class="button is-small has-background-danger-45 has-text-white" onclick="selectUser(<%= member.user_id %>, '<%= member.first_name %>')">Sélectionner</button>
                      </div>
                    </li>
                  <% }) %>
                </ul>
              </div>
            </div>
          </div>

          <!-- Colonne pour la messagerie -->
          <div class="column is-two-thirds">
            <div class="panel-block">
              <div id="chatBox" style="height: 400px; overflow-y: auto; border: 1px solid #dbdbdb; padding: 1em; background-color: white;">
                <p class="has-text-black">Sélectionnez un membre pour commencer à discuter.</p>
              </div>
            </div>
            <div class="panel-block">
              <div class="field has-addons">
                <div class="control is-expanded">
                  <input id="messageInput" class="input" placeholder="Tapez votre message...">
                </div>
                <div class="control">
                  <button class="button has-background-danger-45 has-text-white" onclick="sendMessage()">Envoyer</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div> 
    </div>
  </div>
</div>

<!-- Charger Socket.IO -->
<script src="/socket.io/socket.io.js"></script>

<script>
  const socket = io('http://localhost:3000');  // Initialiser la connexion Socket.IO

  let selectedUserId = null;  // ID de l'utilisateur sélectionné
  let selectedUserName = '';
  const adminId = <%= adminId %>;  // Récupère l'ID de l'admin depuis la session

  // Sélectionner un utilisateur et afficher ses messages via Fetch
  function selectUser(userId, userName) {
    selectedUserId = userId;
    selectedUserName = userName;
    const chatBox = document.getElementById('chatBox');
    chatBox.innerHTML = `<p class="has-text-black">Chat avec l'utilisateur : ${userName} (#${userId})</p>`;

    // Récupérer les messages via l'API
    fetch(`/admin/messages/${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      chatBox.innerHTML = ''; // Vider la fenêtre de chat avant d'afficher les messages
      const messages = data.messages;

      if (messages.length > 0) {
        messages.forEach(message => {
          chatBox.innerHTML += `<p class="has-text-black"><strong>${message.sender_id === adminId ? 'Admin' : selectedUserName}</strong>: ${message.message}</p>`;
        });
        chatBox.scrollTop = chatBox.scrollHeight;  // Scroll automatique vers le bas
      } else {
        chatBox.innerHTML += '<p class="has-text-black">Aucun message trouvé.</p>';
      }
    })
    .catch(error => {
      console.error('Erreur lors de la récupération des messages:', error);
      chatBox.innerHTML = '<p class="has-text-danger">Erreur lors de la récupération des messages.</p>';
    });
  }

  // Envoyer un message via Socket.IO
  function sendMessage() {
    const message = document.getElementById('messageInput').value;
    if (selectedUserId && message.trim()) {
      // Émettre le message via Socket.IO
      socket.emit('message', {
        sender_id: adminId,  // ID de l'admin
        receiver_id: selectedUserId,
        message: message
      });

      // Sauvegarder le message via fetch (appel API)
      fetch(`/admin/messages`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ sender_id: adminId, receiver_id: selectedUserId, message: message })
      })
      .then(response => response.json())
      .then(data => {
        // Ajouter le message envoyé dans la fenêtre de chat
        const chatBox = document.getElementById('chatBox');
        chatBox.innerHTML += `<p class="has-text-black"><strong>Admin</strong>: ${message}</p>`;
        chatBox.scrollTop = chatBox.scrollHeight;

        // Vider le champ de saisie
        document.getElementById('messageInput').value = '';
      })
      .catch(error => {
        console.error('Erreur lors de l\'envoi du message:', error);
      });
    }
  }

  // Recevoir les messages via Socket.IO
  socket.on('message', (data) => {
    // Vérifier si le message est destiné à l'utilisateur sélectionné
    if ((data.sender_id === selectedUserId && data.receiver_id === adminId) ||
        (data.sender_id === adminId && data.receiver_id === selectedUserId)) {

      const chatBox = document.getElementById('chatBox');
      chatBox.innerHTML += `<p class="has-text-black"><strong>${data.sender_id === adminId ? 'Admin' : selectedUserName}</strong>: ${data.message}</p>`;
      chatBox.scrollTop = chatBox.scrollHeight;
    }
  });
</script>

<%- include('partials/side-menu') %>
<%- include('partials/footer') %>
